generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                String    @id @default(cuid())
  clerkId           String    @unique
  email             String    @unique
  firstName         String
  lastName          String
  role              UserRole
  preferredLanguage Language  @default(KM)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  parent         User?           @relation("ParentChild", fields: [parentId], references: [id])
  parentId       String?
  children       User[]          @relation("ParentChild")
  studentProfile StudentProfile?
  teacherProfile TeacherProfile?
  progress       Progress[]
  forumPosts     ForumPost[]
  forumAnswers   ForumAnswer[]
  payments       Payment[]
  notifications  Notification[]
  notificationPreferences NotificationPreference?
  videoProgress  VideoProgress[]
  resourceDownloads ResourceDownload[]
  pdEnrollments  PDEnrollment[]
  pdModuleCompletions PDModuleCompletion[]
  pdIssuedCertificates PDIssuedCertificate[]
  assessmentAttempts AssessmentAttempt[]

  @@index([email])
  @@index([clerkId])
  @@map("new_users")
}

model StudentProfile {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  grade      String
  school     String?
  points     Int      @default(0)
  level      Int      @default(1)
  streak     Int      @default(0)
  lastActive DateTime @default(now())

  @@index([userId])
  @@map("new_student_profiles")
}

model TeacherProfile {
  id        String  @id @default(cuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  school    String
  subjects  Json    // Array of subject IDs
  verified  Boolean @default(false)

  @@index([userId])
  @@map("new_teacher_profiles")
}

// Educational Content
model Subject {
  id          String   @id @default(cuid())
  code        String   @unique // e.g., "math", "khmer", "english", "science", "social_studies", "calm"
  name        String
  nameKh      String
  description String   @db.Text
  icon        String?
  order       Int      @default(0)
  active      Boolean  @default(true)

  lessons     Lesson[]
  exercises   Exercise[]
  videos      Video[]
  libraryResources LibraryResource[]
  assessments Assessment[]
  
  @@map("new_subjects")
}

model Lesson {
  id          String   @id @default(cuid())
  subjectId   String
  subject     Subject  @relation(fields: [subjectId], references: [id])
  title       String
  titleKh     String
  description String   @db.Text
  grade       String
  order       Int      @default(0)
  duration    Int      // in minutes
  active      Boolean  @default(true)

  exercises   Exercise[]
  progress    Progress[]
  videos      Video[]

  @@index([subjectId, grade])
  @@map("new_lessons")
}

model Exercise {
  id           String       @id @default(cuid())
  subjectId    String
  subject      Subject      @relation(fields: [subjectId], references: [id])
  lessonId     String?
  lesson       Lesson?      @relation(fields: [lessonId], references: [id])
  type         ExerciseType
  title        String
  titleKh      String
  instructions String       @db.Text
  content      Json         // Exercise-specific content
  solution     Json         // Solution data
  difficulty   Difficulty   @default(EASY)
  grade        String
  points       Int          @default(10)
  order        Int          @default(0)
  active       Boolean      @default(true)

  attempts     ExerciseAttempt[]

  @@index([subjectId, type, grade])
  @@index([lessonId])
  @@map("new_exercises")
}

// Video Content Management
model Video {
  id          String   @id @default(cuid())
  title       String
  titleKh     String?
  description String?  @db.Text
  url         String
  thumbnailUrl String?
  duration    Int      // in seconds
  subjectId   String
  subject     Subject  @relation(fields: [subjectId], references: [id])
  grade       String
  lessonId    String?
  lesson      Lesson?  @relation(fields: [lessonId], references: [id])
  views       Int      @default(0)
  uploadedBy  String
  uploadedAt  DateTime @default(now())
  tags        Json     // Array of tags
  transcriptUrl String?
  
  videoProgress VideoProgress[]
  
  @@index([subjectId, grade])
  @@index([lessonId])
  @@map("new_videos")
}

model VideoProgress {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  videoId       String
  video         Video    @relation(fields: [videoId], references: [id])
  watchedSeconds Int
  completed     Boolean  @default(false)
  lastWatchedAt DateTime @updatedAt
  
  @@unique([userId, videoId])
  @@map("new_video_progress")
}

// Digital Library System
model LibraryResource {
  id          String       @id @default(cuid())
  title       String
  titleKh     String?
  description String?      @db.Text
  type        ResourceType
  fileUrl     String
  fileSize    Int          // in bytes
  subjectId   String?
  subject     Subject?     @relation(fields: [subjectId], references: [id])
  grade       String?
  tags        Json         // Array of tags
  downloads   Int          @default(0)
  uploadedBy  String
  uploadedAt  DateTime     @default(now())
  
  userDownloads ResourceDownload[]
  
  @@index([subjectId, grade])
  @@index([type])
  @@map("new_library_resources")
}

model ResourceDownload {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  resourceId String
  resource   LibraryResource @relation(fields: [resourceId], references: [id])
  downloadedAt DateTime @default(now())
  
  @@index([userId])
  @@map("new_resource_downloads")
}

// Professional Development System
model ProfessionalDevelopmentCourse {
  id          String   @id @default(cuid())
  title       String
  titleKh     String?
  description String   @db.Text
  duration    Int      // in hours
  level       PDLevel
  
  modules     PDModule[]
  enrollments PDEnrollment[]
  certificate PDCertificate?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("new_pd_courses")
}

model PDModule {
  id          String   @id @default(cuid())
  courseId    String
  course      ProfessionalDevelopmentCourse @relation(fields: [courseId], references: [id])
  title       String
  titleKh     String?
  content     Json     // Rich content with videos, texts, activities
  order       Int
  duration    Int      // in minutes
  
  completions PDModuleCompletion[]
  
  @@index([courseId])
  @@map("new_pd_modules")
}

model PDEnrollment {
  id          String   @id @default(cuid())
  teacherId   String
  teacher     User     @relation(fields: [teacherId], references: [id])
  courseId    String
  course      ProfessionalDevelopmentCourse @relation(fields: [courseId], references: [id])
  enrolledAt  DateTime @default(now())
  completedAt DateTime?
  progress    Float    @default(0) // 0-100
  
  @@unique([teacherId, courseId])
  @@map("new_pd_enrollments")
}

model PDModuleCompletion {
  id          String   @id @default(cuid())
  moduleId    String
  module      PDModule @relation(fields: [moduleId], references: [id])
  teacherId   String
  teacher     User     @relation(fields: [teacherId], references: [id])
  completedAt DateTime @default(now())
  
  @@unique([moduleId, teacherId])
  @@map("new_pd_module_completions")
}

model PDCertificate {
  id          String   @id @default(cuid())
  courseId    String   @unique
  course      ProfessionalDevelopmentCourse @relation(fields: [courseId], references: [id])
  templateUrl String
  
  issuedCertificates PDIssuedCertificate[]
  
  @@map("new_pd_certificates")
}

model PDIssuedCertificate {
  id            String   @id @default(cuid())
  certificateId String
  certificate   PDCertificate @relation(fields: [certificateId], references: [id])
  teacherId     String
  teacher       User     @relation(fields: [teacherId], references: [id])
  issuedAt      DateTime @default(now())
  certificateUrl String
  
  @@unique([certificateId, teacherId])
  @@map("new_pd_issued_certificates")
}

// Assessment System (EGRA, EGMA, etc.)
model Assessment {
  id          String   @id @default(cuid())
  title       String
  titleKh     String?
  type        AssessmentType
  grade       String
  subjectId   String?
  subject     Subject? @relation(fields: [subjectId], references: [id])
  duration    Int      // in minutes
  
  questions   AssessmentQuestion[]
  attempts    AssessmentAttempt[]
  
  createdAt   DateTime @default(now())
  
  @@index([type, grade])
  @@map("new_assessments")
}

model AssessmentQuestion {
  id          String   @id @default(cuid())
  assessmentId String
  assessment  Assessment @relation(fields: [assessmentId], references: [id])
  question    Json     // Flexible question format
  correctAnswer Json
  points      Int
  order       Int
  
  responses   AssessmentResponse[]
  
  @@index([assessmentId])
  @@map("new_assessment_questions")
}

model AssessmentAttempt {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  assessmentId String
  assessment  Assessment @relation(fields: [assessmentId], references: [id])
  startedAt   DateTime @default(now())
  completedAt DateTime?
  score       Float?
  
  responses   AssessmentResponse[]
  
  @@index([userId, assessmentId])
  @@map("new_assessment_attempts")
}

model AssessmentResponse {
  id          String   @id @default(cuid())
  attemptId   String
  attempt     AssessmentAttempt @relation(fields: [attemptId], references: [id])
  questionId  String
  question    AssessmentQuestion @relation(fields: [questionId], references: [id])
  answer      Json
  isCorrect   Boolean
  timeSpent   Int      // in seconds
  
  @@unique([attemptId, questionId])
  @@map("new_assessment_responses")
}

model ExerciseAttempt {
  id         String   @id @default(cuid())
  userId     String
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  answer     Json
  isCorrect  Boolean
  score      Int
  timeSpent  Int      // in seconds
  attempts   Int      @default(1)
  completedAt DateTime @default(now())

  @@index([userId, exerciseId])
  @@index([completedAt])
  @@map("new_exercise_attempts")
}

// Progress Tracking
model Progress {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  completed Boolean  @default(false)
  score     Float    @default(0)
  startedAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([userId])
  @@map("new_progress")
}

// Forum
model ForumPost {
  id        String    @id @default(cuid())
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  subject   String
  title     String
  content   String    @db.Text
  tags      Json      // Array of tags stored as JSON
  views     Int       @default(0)
  upvotes   Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  answers   ForumAnswer[]
  savedBy   SavedPost[]

  @@index([subject])
  @@index([createdAt])
  @@map("new_forum_posts")
}

model ForumAnswer {
  id        String    @id @default(cuid())
  postId    String
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  content   String    @db.Text
  upvotes   Int       @default(0)
  accepted  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([postId])
  @@map("new_forum_answers")
}

model SavedPost {
  id        String    @id @default(cuid())
  userId    String
  postId    String
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  savedAt   DateTime  @default(now())

  @@unique([userId, postId])
  @@map("new_saved_posts")
}

// Payments
model Payment {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  amount          Float
  currency        Currency
  status          PaymentStatus
  paymentMethod   String
  paymentIntentId String?       @unique
  description     String
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@index([status])
  @@map("new_payments")
}

// Enums
enum UserRole {
  STUDENT
  PARENT
  TEACHER
  ADMIN
}

enum Language {
  KM // Khmer
  EN // English
}

enum ExerciseType {
  MULTIPLE_CHOICE
  FILL_IN_GAPS
  DRAG_DROP
  MATCHING
  TRUE_FALSE
  SHORT_ANSWER
  LONG_ANSWER
  LISTENING
  SPEAKING
  DRAWING
  SORTING
  SEQUENCING
  LABELING
  DICTATION
  FIND_WORD
  FIND_LETTER
  CHOOSE_WORD
  INPUT
  SELECT_SENTENCE
  WRITE_ANSWER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Currency {
  USD
  KHR
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum NotificationType {
  ASSIGNMENT_CREATED
  ASSIGNMENT_DUE_SOON
  ASSIGNMENT_GRADED
  CLASS_ANNOUNCEMENT
  LIVE_CLASS_STARTING
  NEW_MESSAGE
  ACHIEVEMENT_EARNED
  SUBSCRIPTION_EXPIRING
  SYSTEM_ALERT
}

enum ResourceType {
  PDF
  EBOOK
  WORKSHEET
  PRESENTATION
  TEMPLATE
  GUIDE
  OTHER
}

enum PDLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum AssessmentType {
  EGRA
  EGMA
  PROFICIENCY_TEST
  GRADE_PROGRESSION
  DIAGNOSTIC
  PLACEMENT
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  type        NotificationType
  title       String
  message     String           @db.Text
  data        Json?            // Additional data specific to notification type
  read        Boolean          @default(false)
  readAt      DateTime?
  createdAt   DateTime         @default(now())
  
  @@index([userId, read])
  @@index([createdAt])
  @@map("new_notifications")
}

model NotificationPreference {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id])
  
  // Email preferences
  emailAssignments      Boolean  @default(true)
  emailGrades          Boolean  @default(true)
  emailAnnouncements   Boolean  @default(true)
  emailMessages        Boolean  @default(true)
  
  // Push preferences
  pushAssignments      Boolean  @default(true)
  pushGrades          Boolean  @default(true)
  pushAnnouncements   Boolean  @default(true)
  pushMessages        Boolean  @default(true)
  pushLiveClasses     Boolean  @default(true)
  
  // In-app preferences
  inAppAll            Boolean  @default(true)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("new_notification_preferences")
}